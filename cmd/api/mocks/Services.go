// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	apierrors "rmansilla92/agree-coding-challenge/cmd/api/apierrors"
	domain "rmansilla92/agree-coding-challenge/cmd/api/domain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// GetCardService provides a mock function with given fields: cardID
func (_m *Services) GetCardService(cardID string) (*domain.CardDTO, apierrors.ApiError) {
	ret := _m.Called(cardID)

	var r0 *domain.CardDTO
	if rf, ok := ret.Get(0).(func(string) *domain.CardDTO); ok {
		r0 = rf(cardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CardDTO)
		}
	}

	var r1 apierrors.ApiError
	if rf, ok := ret.Get(1).(func(string) apierrors.ApiError); ok {
		r1 = rf(cardID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apierrors.ApiError)
		}
	}

	return r0, r1
}

// GetCardsService provides a mock function with given fields:
func (_m *Services) GetCardsService() (map[string]interface{}, apierrors.ApiError) {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 apierrors.ApiError
	if rf, ok := ret.Get(1).(func() apierrors.ApiError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apierrors.ApiError)
		}
	}

	return r0, r1
}

// ProcessCreateCard provides a mock function with given fields: card
func (_m *Services) ProcessCreateCard(card *domain.CardDTO) apierrors.ApiError {
	ret := _m.Called(card)

	var r0 apierrors.ApiError
	if rf, ok := ret.Get(0).(func(*domain.CardDTO) apierrors.ApiError); ok {
		r0 = rf(card)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apierrors.ApiError)
		}
	}

	return r0
}

// ProcessDeleteCard provides a mock function with given fields: cardID
func (_m *Services) ProcessDeleteCard(cardID string) apierrors.ApiError {
	ret := _m.Called(cardID)

	var r0 apierrors.ApiError
	if rf, ok := ret.Get(0).(func(string) apierrors.ApiError); ok {
		r0 = rf(cardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apierrors.ApiError)
		}
	}

	return r0
}

// ProcessUpdateCard provides a mock function with given fields: cardID, card
func (_m *Services) ProcessUpdateCard(cardID string, card *domain.CardDTO) apierrors.ApiError {
	ret := _m.Called(cardID, card)

	var r0 apierrors.ApiError
	if rf, ok := ret.Get(0).(func(string, *domain.CardDTO) apierrors.ApiError); ok {
		r0 = rf(cardID, card)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apierrors.ApiError)
		}
	}

	return r0
}

// NewServices creates a new instance of Services. It also registers a cleanup function to assert the mocks expectations.
func NewServices(t testing.TB) *Services {
	mock := &Services{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
